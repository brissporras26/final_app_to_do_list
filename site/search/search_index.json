{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#todo-app-documentation","title":"Todo App Documentation","text":"<p>Welcome to the Todo App documentation. This documentation provides comprehensive information about setting up, testing, and maintaining the Todo application.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Todo App is a Flask-based web application that provides:</p> <ul> <li>User authentication and registration</li> <li>Task management system</li> <li>RESTful API endpoints</li> <li>MongoDB database integration</li> <li>Comprehensive test coverage</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Setup Guide: Installation and configuration instructions</li> <li>Testing Guide: Complete testing documentation</li> <li>API Documentation: Detailed API reference</li> <li>Database Schema: Database structure and models</li> <li>Troubleshooting: Common issues and solutions</li> <li>Contributing: Guidelines for contributors</li> </ul>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#api-documentation","title":"API Documentation","text":""},{"location":"api/#user-management-api","title":"User Management API","text":""},{"location":"api/#register-user","title":"Register User","text":"<pre><code>def register_user_logic(email: str, password: str = None) -&gt; bool:\n    \"\"\"\n    Register a new user in the system.\n\n    Args:\n        email (str): User's email address\n        password (str, optional): User's password. If None, creates passwordless user\n\n    Returns:\n        bool: True if registration successful, False otherwise\n    \"\"\"\n</code></pre>"},{"location":"api/#login-user","title":"Login User","text":"<pre><code>def login_user_logic(email: str, password: str) -&gt; bool:\n    \"\"\"\n    Authenticate user credentials.\n\n    Args:\n        email (str): User's email address\n        password (str): User's password\n\n    Returns:\n        bool: True if authentication successful, False otherwise\n    \"\"\"\n</code></pre>"},{"location":"api/#task-management-api","title":"Task Management API","text":""},{"location":"api/#add-task","title":"Add Task","text":"<pre><code>def add_task_logic(user_email: str, task_name: str, priority: str) -&gt; ObjectId:\n    \"\"\"\n    Add a new task for a user.\n\n    Args:\n        user_email (str): Email of the task owner\n        task_name (str): Name of the task\n        priority (str): Task priority level\n\n    Returns:\n        ObjectId: ID of the created task\n\n    Raises:\n        ValueError: If user not found\n    \"\"\"\n</code></pre>"},{"location":"api/#update-task","title":"Update Task","text":"<pre><code>def update_task(task_id: str, new_name: str, new_priority: str) -&gt; bool:\n    \"\"\"\n    Update an existing task.\n\n    Args:\n        task_id (str): ID of the task to update\n        new_name (str): New task name\n        new_priority (str): New task priority\n\n    Returns:\n        bool: True if update successful, False otherwise\n    \"\"\"\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-guide","title":"Contributing Guide","text":""},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Set up development environment</li> <li>Install dev dependencies</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8</li> <li>Use type hints</li> <li>Write clear docstrings</li> <li>Keep functions focused</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#adding-new-tests","title":"Adding New Tests","text":"<ol> <li>Create test file in <code>tests/</code> directory</li> <li>Use appropriate fixtures</li> <li>Follow existing naming conventions</li> <li>Include docstrings</li> <li>Update documentation</li> </ol>"},{"location":"contributing/#test-coverage","title":"Test Coverage","text":"<ul> <li>Aim for high coverage</li> <li>Test edge cases</li> <li>Include negative tests</li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Write tests for new features</li> <li>Update documentation</li> <li>Run full test suite</li> <li>Submit PR with description</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#docstring-format","title":"Docstring Format","text":"<pre><code>def function_name(param1: type, param2: type) -&gt; return_type:\n    \"\"\"\n    Brief description.\n\n    Extended description if needed.\n\n    Args:\n        param1 (type): Description\n        param2 (type): Description\n\n    Returns:\n        return_type: Description\n\n    Raises:\n        ExceptionType: Description\n    \"\"\"\n</code></pre>"},{"location":"database/","title":"Database Schema","text":""},{"location":"database/#database-schema","title":"Database Schema","text":""},{"location":"database/#collections","title":"Collections","text":""},{"location":"database/#users-collection","title":"Users Collection","text":"<pre><code>{\n    \"_id\": ObjectId,\n    \"email\": string,\n    \"password\": string,  // Hashed password\n    \"tasks\": [ObjectId]  // Array of task IDs\n}\n</code></pre>"},{"location":"database/#tasks-collection","title":"Tasks Collection","text":"<pre><code>{\n    \"_id\": ObjectId,\n    \"name\": string,\n    \"priority\": string,\n    \"user_id\": ObjectId\n}\n</code></pre>"},{"location":"database/#indexes","title":"Indexes","text":""},{"location":"database/#users-collection_1","title":"Users Collection","text":"<ul> <li>Unique index on <code>email</code> field</li> <li>Index on <code>tasks</code> array</li> </ul>"},{"location":"database/#tasks-collection_1","title":"Tasks Collection","text":"<ul> <li>Index on <code>user_id</code> field</li> <li>Compound index on <code>name</code> and <code>user_id</code></li> </ul>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#setup-guide","title":"Setup Guide","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.x</li> <li>pip (Python package installer)</li> <li>MongoDB</li> <li>virtualenv (recommended)</li> </ul>"},{"location":"setup/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository <pre><code>git clone &lt;repository-url&gt;\ncd todo-app\n</code></pre></p> </li> <li> <p>Create and activate virtual environment <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Configure MongoDB <pre><code># Make sure MongoDB is running locally\n# Default connection string: mongodb://localhost:27017/test_db\n</code></pre></p> </li> </ol>"},{"location":"setup/#configuration","title":"Configuration","text":""},{"location":"setup/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the root directory:</p> <pre><code>FLASK_APP=app\nFLASK_ENV=development\nMONGO_URI=mongodb://localhost:27017/todo_app\nSECRET_KEY=your-secret-key\n</code></pre>"},{"location":"setup/#mongodb-setup","title":"MongoDB Setup","text":"<ol> <li>Start MongoDB service</li> <li>Create database and collections</li> <li>Set up indexes (if required)</li> </ol>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#testing-guide","title":"Testing Guide","text":""},{"location":"testing/#test-structure","title":"Test Structure","text":"<p>The test suite is organized into several key files:</p> <ul> <li><code>conftest.py</code>: Global test fixtures and configurations</li> <li><code>test_system.py</code>: System-level integration tests</li> <li><code>test_user_logic.py</code>: User management logic tests</li> <li><code>test_login_logic.py</code>: Authentication logic tests</li> <li><code>test_task.py</code>: Task management logic tests</li> </ul>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#basic-test-commands","title":"Basic Test Commands","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_system.py\n\n# Run tests with coverage\npytest --cov=app tests/\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"testing/#test-fixtures","title":"Test Fixtures","text":""},{"location":"testing/#global-fixtures","title":"Global Fixtures","text":"<pre><code># conftest.py\n@pytest.fixture(scope=\"module\")\ndef app():\n    \"\"\"Create application for testing\"\"\"\n    app = create_app()\n    app.config.update({\n        'TESTING': True,\n        'SECRET_KEY': 'test-secret',\n        'MONGO_URI': 'mongodb://localhost:27017/test_db',\n        'WTF_CSRF_ENABLED': False\n    })\n    return app\n</code></pre>"},{"location":"testing/#authentication-fixtures","title":"Authentication Fixtures","text":"<pre><code>@pytest.fixture(scope=\"function\")\ndef test_user():\n    \"\"\"Test user fixture\"\"\"\n    return {\n        'email': 'test@example.com',\n        'password': 'test_password'\n    }\n</code></pre>"},{"location":"testing/#test-categories","title":"Test Categories","text":""},{"location":"testing/#user-authentication-tests","title":"User Authentication Tests","text":"<ul> <li>Registration flow</li> <li>Login validation</li> <li>Session management</li> <li>Unauthorized access handling</li> </ul>"},{"location":"testing/#task-management-tests","title":"Task Management Tests","text":"<ul> <li>Task creation</li> <li>Task listing</li> <li>Task editing</li> <li>Task deletion</li> </ul>"},{"location":"testing/#integration-tests","title":"Integration Tests","text":"<ul> <li>Full user workflows</li> <li>Session handling</li> <li>Database operations</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#mongodb-connection-issues","title":"MongoDB Connection Issues","text":"<p>Problem: Unable to connect to MongoDB <pre><code>Solution: \n- Verify MongoDB is running: `mongod --version`\n- Check connection string in config\n- Ensure correct port (default: 27017)\n</code></pre></p>"},{"location":"troubleshooting/#test-database-conflicts","title":"Test Database Conflicts","text":"<p>Problem: Tests failing due to dirty database state <pre><code>Solution:\n- Use mock_db fixture for isolation\n- Clear test database before runs\n- Use function-scoped fixtures\n</code></pre></p>"},{"location":"troubleshooting/#authentication-issues","title":"Authentication Issues","text":"<p>Problem: Tests failing with unauthorized access <pre><code>Solution:\n- Verify authenticated_client fixture\n- Check session management\n- Ensure proper test user setup\n</code></pre></p>"},{"location":"troubleshooting/#debug-tips","title":"Debug Tips","text":"<ol> <li>Enable Flask debug mode</li> <li>Use pytest's <code>-v</code> flag for verbose output</li> <li>Check application logs</li> <li>Verify environment variables</li> </ol>"}]}